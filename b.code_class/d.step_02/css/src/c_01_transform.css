@charset "UTF-8";
/* transform.css */

#wrap {
  width: 800px; height:auto; min-height:500px;  
  margin:auto;
}
h1 {
  width: 100%; height: auto;
  margin-bottom: 50px;
  font-size:1.5rem;
}
h2 {
  border-bottom: 1px solid #171717;
}

.part {
  width: 95%; height:800px;
  margin:auto; margin-top:50px; padding:8px; border:1px solid #333;
}
h3 {
  background-color: #ddf;
}
.part ul {
  width: 100%; height:auto; 
  background-color: #faa;
}
.part li {
  width: 100px; height: 100px;
  border-radius:4px;
  border:1px solid #fa0;
  margin:8px;
  color:#fff;
  background-color: #07a;
}

/* =============================================================== */
.translate li {
  transform: all 500ms linear;
}
.translate:hover li:nth-child(1) {
  transform: translateX(100px);
}
.translate:hover li:nth-child(2) {
  transform: translateY(-100px);
}
.translate:hover li:nth-child(3) {
  transform: translate(-120px, 50px);
}
/* x와 y를 따로 써주는 것보단 같이 써주는게 더 보기 깔끔하고 좋음 */
.translate:hover li:nth-child(4) {
  transform: translatez(500px);
}
.translate:hover li:nth-child(5) {
  transform: translateX(50%);
}
/* z축은 번외 (변화 없음) */
/* ------------------------------------------------ */
.scale li {margin: 30px;
transition: all 400ms ease;}
.scale:hover li {margin: 30px;}
.scale:hover li:nth-child(1) {
  transform: scale(120%);
}
.scale:hover li:nth-child(2) {
  transform: scaleX(1.5);
}
/* 150% 또는 1.5라고 써도 됨 */
.scale:hover li:nth-child(3) {
  transform: scaleY(0.7);
}
/* .7이라고 써도 되지만 헷갈리기 때문에 0.7배라고 쓰는게 좋음 */
.scale:hover li:nth-child(4) {
  transform: scale(0.5, 1.5);
}
.scale:hover li:nth-child(5) {
  transform: scaleZ(2);
}
/* scaleZ는 앞뒤로만 커지는 개념 */

.skew li {
  margin: 30px; transition: all 300ms ease-in;
}
.skew li:nth-child(1) {
  transform: skew(30deg);
}
/* 각도를 표시함 */
.skew li:nth-child(2) {
  transform: skewY(30deg);
}
/* 안에 글자도 각이 틀어짐 */
.skew li:nth-child(3) {
  transform: skew(30deg, 15deg);
}
/* skew는 x와 y를 같이 쓰는 사람들이 별로 없음 */
.skew li:nth-child(4) {
  transform: skewX(45deg);
}
.skew li:nth-child(5) span {
  display: block; width: 100%; height: 100%;
  transform: skewX(-45%);
}
/* -45deg라고 써도 변화하지 않음 왜냐면 inline이기 때문에 형태를 가지지 않는 아이이기 때문에 block처리 후 사용 */

/* ------------------------------------------------------------------ */
.rotate li { margin:40px; transition:all 300ms ease-in;}
.rotate:hover li:nth-child(1){ transform:rotate(45deg); }
.rotate:hover li:nth-child(2){ transform: rotateY(720deg);}
/* skew는 x,y축을 기준으로 갖고 있음
  rotate는 z축을 기준으로 돌아감
  모든 아이들이 기준축이 다 다르므로 주의 필요 */
.rotate:hover li:nth-child(3){ transform: rotateX(30deg);}

/* .rotate:hover li:nth-child(4) {
  transform: rotate(30deg,45deg);
}
rotate(30deg,45deg)/rotateX(30deg)rotateY(45deg)가 아닌 rotate3D(1,1,1,60deg)로 쓰는 것이 맞음 */
.rotate:hover li:nth-child(5){ transform: rotateY(180deg);}

.rotate li:nth-child(5){
  position: relative;
  z-index: 20; width: 200px; height: 150px;
}
.rotate li div {
  position: absolute; top: 0; left: 0;
  backface-visibility: hidden;
  transition: all 400ms ease;
  width: 100%; height: 100%; padding: 3rem;}
.front {
  z-index:1;
  background-color: #fa0;
  transform:rotateY(0);
}
.back {
  background-color: #acf; 
  transform:rotateY(180deg);
}

.rotate li:hover .front {
  transform: rotateY(180deg);
}
.rotate li:hover .back {
  transform: rotateY(360deg);
}

/* backface-visiblity:hidden은 뒷면을 숨겨라
뒤집어진 화면을 가지고 작성할때 많이 사용 */
/* ----------------------------------------------------------- */
.part .rotate2 {
  perspective: 500px;
  /* 원근법
  수치가 작을 수록 모니터와 최대한 가까이 붙음
  수치가 크면 원근법이 더 멀리서 보는 것처럼 보임
  따라서, 수치를 적당히 주는게 좋음(500-700px) 
  틀의 관점에서 주는 원근법을 줌 */
  float: left; width: auto;
}
.rotate2 li{
  float: left; transition: all 1500ms linear;
  text-align: center; line-height: 100px;
}
.rotate2:hover li{
  transform: rotateY(180deg);
}

/* ------------------------------------------------------------ */
.part .rotate3 {
  float: left; width: auto; margin-top: 40px;
}

.rotate3 li {
  float: left; transition: all 1500ms linear;
  text-align: center; line-height: 100px;
}

.rotate3:hover li {
  transform:perspective(300px) rotateY(180deg)
}

/* 
  - 카드 뒤집기 문제 발생 해결요망
  - 앞면,뒷면을 만들어서 배치 후
  - 감싼요소를 회전 X
  - 앞면, 뒷면을 만든 각각의 카드를 회전시켜야 한다!
*/

/* ------------------------------------------------------------ */

.multi_tr li {
  transition: all 1000ms ease;
}
.multi_tr:hover li:nth-child(1) {
  transform: translateX(500px) rotate(360deg);
}
/* 이동하면서 회전 (굴러감) */
.multi_tr:hover li:nth-child(2) {
  transform: rotate(360deg) translateX(500px);
}
/* 회전하면서 이동
  회전 한 뒤 이동 또는 그 반대는 안됨
  동시에만 가능 
  0.5초마다 100px씩 이동
  1초마다 200px씩 이동
  1.5초마다 300px씩 이동 */

/* 
  perspective: 숫자가 작을수록 가까운처리 ; 
  transform-origin: 기준의좌표를 지정하는 형태;
  transform: translate() || scale() || skew() || roatate() || perspective();
  backface-visibility:hidden || visible; 
*/

#perspectiveWrap {
  position: relative;
  display: flex;
  justify-content: space-around;
  /* 공간을 두고 만들어주고
  space-around는 padding을 주는 것과 같은 경우
  부 */

  width: 100%; min-width: 1440px; height: 400px;
  padding-bottom: 500px; padding-top: 50px;
  box-sizing:content-box;
  background-color: #eee;
  perspective: 500px;
}
.pers_card {
  width: 250px; height: 400px;
  background-color: #acf;
  background-image: linear-gradient(45deg, #acf, #fac);
  border-radius: 5px;
  transition: all 1s linear;
}

/* #perspectiveWrap:hover .pers_card {
  transform: rotateX(45deg);
} */
#perspectiveWrap:hover .pers_card {
  transform: perspective(500px) rotateX(45deg);
}